// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_TEST_PROJECT_ELF, GUEST_TEST_PROJECT_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    
    use std::fs::read_to_string;
    let file_content = read_to_string("./day3of2022.txt")
    // let file_content = read_to_string("./sampleInput.txt")
        .expect("Should have been able to read the file");
    let string_iter = file_content.split('\n');
    let mut string_array: Vec<String> = string_iter.map(|s| s.to_string()).collect();
    string_array.pop();

    let env = ExecutorEnv::builder()
        .write(&string_array)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, GUEST_TEST_PROJECT_ELF)
        .unwrap();

    // Implement code for retrieving receipt journal here.
    let _output: usize = receipt.journal.decode().unwrap();
    println!("El output deberia ser 157 y es: {:?}", _output);
    // 7824
    
    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(GUEST_TEST_PROJECT_ID)
        .unwrap();
}
