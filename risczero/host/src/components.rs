// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::COMPONENTS_ELF;
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use std::fs::read_to_string;

pub fn components(input_path: &str) -> Receipt {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    // tracing_subscriber::fmt()
    //     .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
    //     .init();

    
    let file_content = read_to_string(input_path)
        .expect("Should have been able to read the file");
    let string_iter = file_content.split('\n');
    let mut string_array: Vec<String> = string_iter.map(|s| s.to_string()).collect();
    string_array.pop();

    let env = ExecutorEnv::builder()
        .write(&string_array)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt: Receipt = prover
        .prove(env, COMPONENTS_ELF)
        .unwrap();

    receipt
    // let serialized_receipt = serde_json::to_string(&receipt).unwrap();
    // write("./host/receipt.txt", serialized_receipt)
    //     .expect("Couldn't write receipt in txt file.");
}

// #[test]
// pub fn test_verify_serialized_receipt() {
//     let serialized_receipt = read_to_string("./receipt.txt")
//         .unwrap();
//     let deserialized: Receipt = serde_json::from_str(&serialized_receipt).unwrap();
//     deserialized
//         .verify(COMPONENTS_ID)
//         .unwrap();
//     assert_eq!(deserialized.journal.decode::<usize>().unwrap(), 7824);
// }
