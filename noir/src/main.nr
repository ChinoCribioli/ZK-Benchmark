use dep::std;

fn main(x: Field, y: pub Field) {
    assert(x != y);
}

#[test]
fn test_main() {
    main(1, 2);

    // Uncomment to make test fail
    // main(1, 1);

    let proof = 0x19f4d6ff7c124f818355b325b446d13364e4354a8a7e92aff4c4359c3382647f014c5df16d3fae13aa41bf48bc4967b47d531cda7f617562c5829abc41e5009a2b18c0bb2563dd086132104dbddea7cc856485fa496badb233471f21590242ab156eaefc00ed71f314e722022c55643836b05a72234d66b62e36c1519b61c63a0eb91f4494de7a6a957a2af2b08c12e67919a8e7cb411fd4c993c16a0133c47d0eff125e9abe086dac44aa91b3e8d9236ff578aa8b25ae0c3d69a8546508644e2d33466fba16d064d8487f6b11e544ee62d996767af0519e9ceaee8e7b8153742f7a67e0d1c10952394d405c53be777048c54822f039c8600e6730130ba22b0d038d53b5c69bb8e9c6f4fa8e23388494269e6fd59422b0268fc5bfa9c1f9c3cc2039574406507661eb1e89056ec13e578602169a4ebc9c850b7b5405b5478d68266ddd5ef6639af586dadedd83ffce9b716238bca22db5b8482dfcfe759c06dc27e7e5a0c521fb30aad0c45fb6868522b9d1bc6d5a596b79a0aea607658425e30b439469fd0f05f4a353387214e9d8bcf74075b7bd9a7be9e485a7e11a6a0d6026b8a8d84e8385451294b3c251f1a296de4df5a9da214ec22a326e0c753a64c82bd8b914c8b2d6990404d3ab09096cdf32a11b83910ae48499279be8474c5d540fea7d24f0c236ac2aabd4c0e4b6646045e722d9208686db8b3a2af64a4a802701b849babebb4567e92c9945f0d42c7d5e8b3eaf6cb42f3e55262aeef39c5fb61f170f321cbcf880f8672372f6e78491c352dba47e551c90df5678078105ab8e040f5e5b532c4420c37ed2f2e6c84e947761953eed497353a756255cb43d68832173e972b2e49358a90d1afafbaa305eae44c3c89164179901a2a001be42aeb712f9adc696723afe326b59ec7f42960ced2382237369e69f2acf17a45f5e99fc292537cfcc73d07eec7680c8f2c09cd67d2e4b97a689eafc40ee56224970070f081050d3500a21efd0f03f26e37b161c4789902f1a6764cd22d8104b3690fcc20518c2b3dfad396ee7791ef517aab4c463228cfb50200798905af0165e5a8dae2ba3cf4d44801b93b37d9b4a8d69c557ae7fb61bfabb296d1e98aac13aae025601dd18096360abae72baf449fef71d1076a524527837086dda4013e3cde4743f11d52ee3fecfcd875db2485253d7c286df67efc331426c5cd9097e1f2d275d85207714033a6c6684a72a9dcfd2e85f0b49eaf2164f369318e741bb4614102a5f11dec7c14970660ef32721483668258975dc12f1c1122aadf482ece212ddc1a42702721b772dabf66ea1732ca9dd279a7a86a2ff16553af66d928e6f31a31d9525341db27e44b5f99b5c1c2d1249deeadb03c6d9653796b61e3a94903395b5a4235e385176cd1e89b26dc3e4300d80c1a3d0bcf73ccd924a16dc3862f5ae8e322b8a0038f917f9704ea07867d669b11b564c72e226155fb6fcf0470fea1eb20009e12a2490b3ee83dee45e07259a255b38e740c77aac1f7a90408179ad3b0c782782deb11465df911291d5d1726b4a990f84e9a8f4f2fc301d38590ca3f40280065c54b612d9ab9fba32865c9430b94409348e9970d451d2a107648572f000fe29ebe625abba173280bb33f8480c795abaff4bc00a3404c38ff50ce3e828ed5510eab1e2947255febda06ee5401d314bd93ec40abf669f0137867503ef2e0aff284dcc125e5c34f4b2d5ef88b9af419a1fb2249dee52a9d022f9d2b7e63328aa186de669805c3f2554b03c92604f20748fe79fa12029be3c31f9f2e3b162d3fd009fbf3dad31360902cd1d990b3a77a681cdaa947a5dcc33297add6e0947856e019cb9dd05966258d64c657730b537f6463a0b5216c5a094e7d83512371bcee91ebb2d7431f44d32b2d98d35adf534971f44af27b5c4f31680f9843adef6e68426afb1ff10fe52b6e4f0ab192b5209d98464fd7bd2714edcb5fe988be43d63ff0dae7dbbf9b6918321d5e6062362c1caa2a475c687a3e91a5d9000abeb4281a9251197ebc3a07079170b66a99cf4d218e917d659b68ff3e949035e5fe2479f540c1063a8ac58af4553f0a19695058a0a07574ea46bc28e26f094c67fe94cbcfe0f4c97cf471473c0efbb2a75b1bff98b3df19ce8a385440dca8b3ad7ed3846540144e876e0d3a6a5636264ac789636e544018e7b6e5309a572fb032d7d3a1aa41c5d674ae4d5ab24aceccfa1aeed6a6655b07314e9edb24bdebc4d26c30832d22f0f88f85024d0356d6b6feaa503b202cd9483c103f84da03cffdf6c29e5cd8b1c8a28cf428a9874d04d11c518cfaa2e94f1cadf172fd2a331e7b55743b822322b78f6f4d57142d8d9a29abaa93f5f7dc07ab72107f6fea46f046ad42915d2d82d62c473703e24c461d4d4099bb78624b92d626ec9c52b36de6cf2a1f40ddac22471ef1966779983758677821d774167794fbe03d6d66391d57e77577be208e909128826410018fc38918f5291f7911c2b9413f1e45928eb48dfb973a05ef71a265f4770da1bc2d8c7e6dda2a0e4c6111fdd1acb831b206b70c36051a62d43df2a62ab728ee41301919e4aa0f62a79abebb4324b67faf1e41d1fc0101584df8c2ce57d96dec4de89454663f912383ae49a83049ec5e6d66ce59c7e45db82758403abdec28459dc9abca4aa06ad55362822a8a04d15918dada3ae4bbb54ae5a321c2c588c2aa4d467288530627c87a6da0efb4c77bee511c4bdedccd4e912370c044883e2efbe2c09dc157107ca38bf2ed31a1059ee7f254a944b585a8d7613e51cc8fdac960923d647f5f763996b2fe0bf6cbc8497d2a961ae8ad97421d9f0bf2a2972f2bcdeeced943227583f93802b62e4c029436c79cb7930a3b3fcddaa170f32c514095b1a091ca0e370a0552580a02310390992cbf19207837c62d7207f2c707df3e2ea0d4d82228cdde7cc5be9e1f1eff3882302b25f6c1a6ffc2dbfb22ed4e2dcd46ae2c7f9783eb552b2b9125e057b7b8b1932bf960a7f39e24ca395;

    std::verify_proof([0].as_slice(), [proof].as_slice(), [1,2].as_slice(), 0x12afbc33412);
    std::println("termine verificacion");
}
